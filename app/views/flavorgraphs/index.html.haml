%head
  %script{:src=>"//unpkg.com/3d-force-graph"}
  %script{:src=>"//unpkg.com/three"}
  %script{:src=>"//unpkg.com/three-spritetext"}

%h1{:align => "center"} Flavor Graph for Community #{params[:com]}


= button_to "Return to Home Page", flavorgraphs_path

%div{:id=>"3d-graph"}

%script
  :plain
    var gData = JSON.parse(gon.graphData);
    var elem = document.getElementById('3d-graph');
    var highlightNodes = [];
    var highlightLink = null;
    var Graph = ForceGraph3D()
      (elem)
        .graphData(gData)
        .nodeLabel('id')
        .nodeColor(node => highlightNodes.indexOf(node) === -1 ? 'rgba(0,255,255,0.6)' : 'rgb(255,0,0,1)')
        .enableNodeDrag(false)
        .d3VelocityDecay(0.8)
        .linkLabel('value')
        .linkOpacity(1)
        .linkWidth(link => link === highlightLink ? 4 : 1)
        .linkDirectionalParticles(link => link === highlightLink ? 4 : 0)
        .linkDirectionalParticleWidth(4)
        .onNodeHover(node => {
          // no state change
          if ((!node && !highlightNodes.length) || (highlightNodes.length === 1 && highlightNodes[0] === node)) return;
          highlightNodes = node ? [node] : [];
          updateGeometries();
        })
        .onLinkHover(link => {
          // no state change
          if (highlightLink === link) return;
          highlightLink = link;
          highlightNodes = link ? [link.source, link.target] : [];
          updateGeometries();
        })
        .linkThreeObject(link => {
          // create line object
          const lineObj = new THREE.Line(
            new THREE.BufferGeometry(),
            new THREE.MeshLambertMaterial({
              color: '#f0f0f0',
              transparent: true,
              opacity: 1
            })
          );
          // add text sprite as child
          const sprite = new SpriteText(`${link.value}`);
          sprite.color = 'lightgrey';
          sprite.textHeight = 1.5;
          lineObj.add(sprite);
          return lineObj;
        })
        .linkPositionUpdate((obj, { start, end }) => {
          const middlePos = Object.assign(...['x', 'y', 'z'].map(c => ({
            [c]: start[c] + (end[c] - start[c]) / 2 // calc middle point
          })));
          const textSprite = obj.children[0];
          // Position link text
          Object.assign(textSprite.position, middlePos);
        })
        .d3Force('link')
        .distance(link => link.value);

    function updateGeometries(){
      try{
        Graph.nodeRelSize(4);
      }
      catch(TypeError){
      }
    }



