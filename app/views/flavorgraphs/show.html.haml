%head
  %script{:src=>"//unpkg.com/3d-force-graph"}
  %script{:src=>"//unpkg.com/three"}
  %script{:src=>"//unpkg.com/three-spritetext"}

%h1{:align => "center"} Flavor Graph for #{(@query_ingredient.id).capitalize}

%div{:id=>"3d-graph"}

%h2{:align => "left"} Data for generating Flavor Graph

%table
  %thead
    %tr
      %th Ingredient
      %th Weight
      %th Shared Neighbors
  %tbody
    -# print each ingredient connected to the selected ingredient
    - @connected_ingredients.each do |ingredient|
      %tr
        %td= ingredient[0].id
        %td= ingredient[1].weight
        %td= ingredient[1].shared_neighbors


%script
  :plain
    const gData = JSON.parse(gon.graphData)
    const Graph = ForceGraph3D()
      (document.getElementById('3d-graph'))
        .graphData(gData)
        .nodeLabel('id')
        .enableNodeDrag(false)
        .d3VelocityDecay(0.8)
        .linkLabel('value')
        .linkOpacity(1)
        .linkThreeObject(link => {
          // create line object
          const lineObj = new THREE.Line(
            new THREE.BufferGeometry(),
            new THREE.MeshLambertMaterial({
              color: '#f0f0f0',
              transparent: true,
              opacity: 1
            })
          );
          // add text sprite as child
          const sprite = new SpriteText(`${link.value}`);
          sprite.color = 'lightgrey';
          sprite.textHeight = 1.5;
          lineObj.add(sprite);
          return lineObj;
        })
        .linkPositionUpdate((obj, { start, end }) => {
          const middlePos = Object.assign(...['x', 'y', 'z'].map(c => ({
            [c]: start[c] + (end[c] - start[c]) / 2 // calc middle point
          })));
          const textSprite = obj.children[0];
          // Position link text
          Object.assign(textSprite.position, middlePos);
        })
        .d3Force('link')
        .distance(link => link.value);

